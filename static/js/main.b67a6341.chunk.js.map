{"version":3,"sources":["constants/particles.js","components/background.js","components/fontawesome.js","components/infobox.js","App.js","serviceWorker.js","index.js"],"names":["config","particles","number","value","density","enable","value_area","size","color","animation","speed","sync","line_linked","distance","opacity","width","move","interactivity","events","onhover","mode","onclick","modes","grab","bubble","duration","repulse","push","particles_nb","remove","AppBackGround","Fragment","params","particlesConfig","id","className","React","Component","library","add","faGithubAlt","faLinkedinIn","faTelegramPlane","faSkype","InfoBox","src","alt","href","target","rel","icon","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAAaA,EAAS,CACpBC,UAAW,CACTC,OAAQ,CACNC,MAAO,GACPC,QAAS,CACPC,QAAQ,EACRC,WAAY,MAGhBC,KAAM,CACJJ,MAAO,GAETK,MAAO,CACLL,MAAO,OACPM,UAAW,CACTJ,QAAQ,EACRK,MAAO,IACPC,MAAM,IAGVC,YAAa,CACXP,QAAQ,EACRQ,SAAU,IACVL,MAAO,OACPM,QAAS,GACTC,MAAO,GAETC,KAAM,CACJX,QAAQ,EACRK,MAAO,IAGXO,cAAe,CACbC,OAAQ,CACNC,QAAS,CACPd,QAAQ,EACRe,KAAM,WAERC,QAAS,CACPhB,QAAQ,EACRe,KAAM,QAER,QAAU,GAEZE,MAAO,CACLC,KAAM,CACJV,SAAU,IACVD,YAAa,CACXE,QAAS,MAGbU,OAAQ,CACNX,SAAU,IACVN,KAAM,GACNkB,SAAU,IAEZC,QAAS,CACPb,SAAU,IACVY,SAAU,GAEZE,KAAM,CACJC,aAAc,GAEhBC,OAAQ,CACND,aAAc,MC9CPE,E,uKAZb,OACC,kBAAC,IAAMC,SAAP,KACC,kBAAC,IAAD,CAAWC,OAAQC,IACnB,yBAAKC,GAAG,SAASC,UAAU,UAC3B,yBAAKD,GAAG,SAASC,UAAU,UAC3B,yBAAKD,GAAG,SAASC,UAAU,e,GAPHC,IAAMC,W,gCCDlCC,IAAQC,IACNC,IACAC,IACAC,IACAC,K,ICkDaC,E,uKAlDX,OACE,kBAAC,IAAD,KACE,yBAAKT,UAAU,aACb,yBAAKA,UAAU,UACb,yBAAKU,IAA8B,qBAAsBC,IAAI,YAG/D,yBAAKX,UAAU,YACb,oEACA,iDACA,uBAAGA,UAAU,gBAAgBY,KAAK,oCAAlC,6BACA,uBAAGA,KAA+B,2BAA4BC,OAAO,SAASb,UAAU,YAAYc,IAAI,uBAAxG,sBAIJ,yBAAKd,UAAU,cACb,yBAAKA,UAAU,kBAEb,uBAAGA,UAAU,gBAAgBa,OAAO,SAASC,IAAI,sBAAsBF,KAAK,gDAC1E,yBAAKZ,UAAU,wBACb,kBAAC,IAAD,CAAiBe,KAAM,CAAC,MAAO,mBAInC,uBAAGf,UAAU,gBAAgBa,OAAO,SAASC,IAAI,sBAAsBF,KAAK,oCAC1E,yBAAKZ,UAAU,sBACb,kBAAC,IAAD,CAAiBe,KAAM,CAAC,MAAO,kBAInC,uBAAGf,UAAU,gBAAgBc,IAAI,sBAAsBF,KAAK,wBAC1D,yBAAKZ,UAAU,wBACb,kBAAC,IAAD,CAAiBe,KAAM,CAAC,MAAO,sBAInC,uBAAGf,UAAU,gBAAgBc,IAAI,sBAAsBF,KAAK,0BAC1D,yBAAKZ,UAAU,qBACb,kBAAC,IAAD,CAAiBe,KAAM,CAAC,MAAO,oB,GAxCzBd,IAAMC,WCSbc,MATf,WACE,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGciB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b67a6341.chunk.js","sourcesContent":["export const config = {\n  particles: {\n    number: {\n      value: 12,\n      density: {\n        enable: true,\n        value_area: 120\n      }\n    },\n    size: {\n      value: 2\n    },\n    color: {\n      value: \"#fff\",\n      animation: {\n        enable: false,\n        speed: 120,\n        sync: true\n      },\n    },\n    line_linked: {\n      enable: true,\n      distance: 120,\n      color: \"#fff\",\n      opacity: 0.5,\n      width: 1\n    },\n    move: {\n      enable: true,\n      speed: 4,\n    },\n  },\n  interactivity: {\n    events: {\n      onhover: {\n        enable: true,\n        mode: \"repulse\",\n      },\n      onclick: {\n        enable: true,\n        mode: \"push\"\n      },\n      \"resize\": true\n    },\n    modes: {\n      grab: {\n        distance: 200,\n        line_linked: {\n          opacity: 0.35\n        }\n      },\n      bubble: {\n        distance: 200,\n        size: 80,\n        duration: 0.4\n      },\n      repulse: {\n        distance: 120,\n        duration: 2\n      },\n      push: {\n        particles_nb: 4\n      },\n      remove: {\n        particles_nb: 2\n      }\n    }\n  }\n}","import React from 'react';\nimport Particles from 'react-particles-js';\nimport { particlesConfig } from \"../constants\";\n\nclass AppBackGround extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<Particles params={particlesConfig} />\n\t\t\t\t<div id=\"stars1\" className=\"stars\"></div>\n\t\t\t\t<div id=\"stars2\" className=\"stars\"></div>\n\t\t\t\t<div id=\"stars3\" className=\"stars\"></div>\n\t\t\t</React.Fragment>\n\n\t\t);\n\t}\n}\n\nexport default AppBackGround;","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { faGithubAlt, faLinkedinIn, faSkype, faTelegramPlane } from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(\n  faGithubAlt,\n  faLinkedinIn,\n  faTelegramPlane,\n  faSkype,\n);","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './fontawesome';\n\nclass InfoBox extends React.Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"container\">\n          <div className=\"avatar\">\n            <img src={process.env.PUBLIC_URL + \"/images/avatar.jpg\"} alt=\"avatar\" />\n          </div>\n\n          <div className=\"headline\">\n            <h1>Nguyễn Vũ Quyền (Leo)</h1>\n            <h2>Software Engineer</h2>\n            <a className=\"mb5 highlight\" href=\"mailto:leo.quyennguyen@gmail.com\">leo.quyennguyen@gmail.com</a>\n            <a href={process.env.PUBLIC_URL + \"/docs/QuyenNguyen_CV.pdf\"} target=\"_blank\" className=\"highlight\" rel=\"noopener noreferrer\">Curriculum Vitae</a>\n          </div>\n        </div>\n\n        <div className=\"social-box\">\n          <div className=\"social-buttons\">\n\n            <a className=\"social-margin\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://www.linkedin.com/in/leo-quyennguyen/\">\n              <div className=\"social-icon linkedin\">\n                <FontAwesomeIcon icon={['fab', 'linkedin-in']} />\n              </div>\n            </a>\n\n            <a className=\"social-margin\" target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/quyennguyenvu\">\n              <div className=\"social-icon github\">\n                <FontAwesomeIcon icon={['fab', 'github-alt']} />\n              </div>\n            </a>\n\n            <a className=\"social-margin\" rel=\"noopener noreferrer\" href=\"https://t.me/Quyennv\">\n              <div className=\"social-icon telegram\">\n                <FontAwesomeIcon icon={['fab', 'telegram-plane']} />\n              </div>\n            </a>\n\n            <a className=\"social-margin\" rel=\"noopener noreferrer\" href=\"skype:vq.leonardo?chat\">\n              <div className=\"social-icon skype\">\n                <FontAwesomeIcon icon={['fab', 'skype']} />\n              </div>\n            </a>\n\n          </div>\n        </div>\n\n      </Router>\n    );\n  }\n}\n\nexport default InfoBox;","import React from 'react';\nimport './App.css';\nimport AppBackground from './components/background'\nimport InfoBox from './components/infobox'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBackground />\n      <InfoBox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}